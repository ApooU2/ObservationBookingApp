version: '3.8'

services:
  # Nginx Reverse Proxy & Load Balancer
  nginx:
    image: nginx:alpine
    container_name: observatory-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - ./frontend/build:/usr/share/nginx/html:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
      - frontend
    networks:
      - observatory-network

  # MongoDB Database with Authentication
  mongodb:
    image: mongo:7.0
    container_name: observatory-db
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE}
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
      - ./backend/scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
      - ./backups:/backup
    ports:
      - "127.0.0.1:27017:27017"  # Only bind to localhost for security
    networks:
      - observatory-network
    command: mongod --auth --bind_ip_all

  # Redis for Session Storage & Caching
  redis:
    image: redis:7-alpine
    container_name: observatory-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-defaultpassword}
    volumes:
      - redis_data:/data
    ports:
      - "127.0.0.1:6379:6379"  # Only bind to localhost
    networks:
      - observatory-network

  # Backend API (Multiple instances for load balancing)
  backend:
    image: observatory-backend:latest
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 30001
      MONGODB_URI: mongodb://${MONGO_ROOT_USER}:${MONGO_ROOT_PASSWORD}@mongodb:27017/${MONGO_DATABASE}?authSource=admin
      JWT_SECRET: ${JWT_SECRET}
      FRONTEND_URL: ${FRONTEND_URL}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      FROM_EMAIL: ${FROM_EMAIL}
      ADMIN_EMAIL: ${ADMIN_EMAIL}
      REDIS_URL: redis://:${REDIS_PASSWORD:-defaultpassword}@redis:6379
      LOG_LEVEL: ${LOG_LEVEL:-info}
    volumes:
      - app_logs:/var/log/observatory-booking
      - uploads:/var/uploads/observatory
    depends_on:
      - mongodb
      - redis
    networks:
      - observatory-network
    deploy:
      replicas: 2  # Run 2 instances for load balancing
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:30001/api/auth/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend (Served by Nginx)
  frontend:
    image: observatory-frontend:latest
    restart: unless-stopped
    environment:
      REACT_APP_API_URL: ${FRONTEND_URL}/api
      REACT_APP_SOCKET_URL: ${FRONTEND_URL}
    volumes:
      - frontend_build:/app/build
    networks:
      - observatory-network

  # Monitoring & Health Checks
  watchtower:
    image: containrrr/watchtower
    container_name: observatory-watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      WATCHTOWER_CLEANUP: true
      WATCHTOWER_POLL_INTERVAL: 3600  # Check for updates every hour
      WATCHTOWER_INCLUDE_STOPPED: true
    networks:
      - observatory-network

  # Log Management
  logrotate:
    image: blacklabelops/logrotate
    container_name: observatory-logrotate
    restart: unless-stopped
    volumes:
      - app_logs:/var/log/observatory-booking
      - nginx_logs:/var/log/nginx
      - ./logrotate.conf:/etc/logrotate.conf:ro
    environment:
      LOGROTATE_INTERVAL: daily
      LOGROTATE_COPIES: 7

volumes:
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local
  redis_data:
    driver: local
  app_logs:
    driver: local
  nginx_logs:
    driver: local
  uploads:
    driver: local
  frontend_build:
    driver: local

networks:
  observatory-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
